
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 18 16:38:31 BRST 2017
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 18 16:38:31 BRST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\004" +
    "\000\002\004\003\000\002\005\005\000\002\006\003\000" +
    "\002\006\002\000\002\007\004\000\002\010\004\000\002" +
    "\011\004\000\002\011\002\000\002\012\005\000\002\013" +
    "\003\000\002\013\002\000\002\014\005\000\002\015\005" +
    "\000\002\015\004\000\002\046\004\000\002\046\003\000" +
    "\002\016\006\000\002\017\006\000\002\017\005\000\002" +
    "\020\005\000\002\020\002\000\002\021\006\000\002\022" +
    "\005\000\002\022\002\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\024\005\000\002\024\003\000\002\024\005\000\002" +
    "\024\005\000\002\025\004\000\002\026\005\000\002\026" +
    "\002\000\002\027\007\000\002\030\002\000\002\030\004" +
    "\000\002\031\006\000\002\032\004\000\002\033\004\000" +
    "\002\033\002\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\035\005\000\002\035\005\000\002\035\004" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\002\000\002\037\004\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\002\000\002\041" +
    "\003\000\002\041\003\000\002\041\005\000\002\041\004" +
    "\000\002\041\003\000\002\041\003\000\002\041\004\000" +
    "\002\042\003\000\002\043\004\000\002\044\005\000\002" +
    "\044\002\000\002\045\003\000\002\045\003\000\002\045" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\004\005\001\002\000\004\002\224\001" +
    "\002\000\004\047\006\001\002\000\004\022\007\001\002" +
    "\000\014\003\014\006\010\007\015\020\023\021\012\001" +
    "\002\000\004\047\174\001\002\000\004\050\173\001\002" +
    "\000\010\022\uffb3\026\uffb3\047\uffb3\001\002\000\004\050" +
    "\ufffd\001\002\000\010\022\uffb1\026\uffb1\047\uffb1\001\002" +
    "\000\014\003\050\007\015\011\052\014\054\047\055\001" +
    "\002\000\004\022\041\001\002\000\004\047\034\001\002" +
    "\000\006\006\010\007\015\001\002\000\004\022\025\001" +
    "\002\000\004\007\015\001\002\000\010\022\uffb2\026\uffb2" +
    "\047\uffb2\001\002\000\004\050\ufffe\001\002\000\006\006" +
    "\010\007\ufff1\001\002\000\004\007\ufff2\001\002\000\004" +
    "\007\ufff3\001\002\000\004\050\uffff\001\002\000\004\007" +
    "\015\001\002\000\004\050\ufffb\001\002\000\004\050\ufffc" +
    "\001\002\000\010\022\ufff4\023\ufff4\024\037\001\002\000" +
    "\004\022\ufff7\001\002\000\006\022\ufff6\023\ufff6\001\002" +
    "\000\004\047\034\001\002\000\006\022\ufff5\023\ufff5\001" +
    "\002\000\014\003\014\006\ufff8\007\ufff8\020\023\021\012" +
    "\001\002\000\006\006\ufffa\007\ufffa\001\002\000\006\006" +
    "\ufff9\007\ufff9\001\002\000\010\010\uffe2\013\uffe2\022\uffe2" +
    "\001\002\000\006\010\uffe4\022\167\001\002\000\010\010" +
    "\uffe1\013\uffe1\022\uffe1\001\002\000\010\010\uffe0\013\uffe0" +
    "\022\uffe0\001\002\000\010\010\uffdd\013\uffdd\022\uffdd\001" +
    "\002\000\010\010\uffdf\013\uffdf\022\uffdf\001\002\000\022" +
    "\016\067\017\065\025\062\036\076\037\063\044\064\045" +
    "\075\047\077\001\002\000\010\010\uffe3\013\uffe3\022\uffe3" +
    "\001\002\000\022\016\067\017\065\025\062\036\076\037" +
    "\063\044\064\045\075\047\077\001\002\000\016\003\056" +
    "\010\uffd8\013\uffd8\022\uffd8\025\057\027\061\001\002\000" +
    "\022\016\067\017\065\025\062\036\076\037\063\044\064" +
    "\045\075\047\077\001\002\000\022\016\067\017\065\025" +
    "\062\036\076\037\063\044\064\045\075\047\077\001\002" +
    "\000\010\010\uffda\013\uffda\022\uffda\001\002\000\024\003" +
    "\073\016\067\017\065\025\062\036\076\037\063\044\064" +
    "\045\075\047\077\001\002\000\024\003\143\016\067\017" +
    "\065\025\062\036\076\037\063\044\064\045\075\047\077" +
    "\001\002\000\016\016\067\017\065\025\062\044\064\045" +
    "\075\047\077\001\002\000\016\016\067\017\065\025\062" +
    "\044\064\045\075\047\077\001\002\000\050\010\uffba\012" +
    "\uffba\013\uffba\015\uffba\022\uffba\024\uffba\026\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\001\002\000\050" +
    "\010\uffbf\012\uffbf\013\uffbf\015\uffbf\022\uffbf\024\uffbf\026" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\127\041\126\042\uffbf\043\125\001" +
    "\002\000\050\010\uffb9\012\uffb9\013\uffb9\015\uffb9\022\uffb9" +
    "\024\uffb9\026\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\001\002\000\034\010\uffd1\012\uffd1\013\uffd1\015" +
    "\uffd1\022\uffd1\024\uffd1\026\uffd1\030\114\031\123\032\115" +
    "\033\122\034\120\035\121\001\002\000\010\010\uffde\013" +
    "\uffde\022\uffde\001\002\000\042\010\uffc4\012\uffc4\013\uffc4" +
    "\015\uffc4\022\uffc4\024\uffc4\026\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\102\037\104\042\103" +
    "\001\002\000\010\010\uffdb\013\uffdb\022\uffdb\001\002\000" +
    "\050\010\uffbe\012\uffbe\013\uffbe\015\uffbe\022\uffbe\024\uffbe" +
    "\026\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\001\002\000\050\010\uffbd\012\uffbd\013\uffbd\015\uffbd\022" +
    "\uffbd\024\uffbd\026\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\001\002\000\016\016\067\017\065\025\062" +
    "\044\064\045\075\047\077\001\002\000\050\010\uffb7\012" +
    "\uffb7\013\uffb7\015\uffb7\022\uffb7\024\uffb7\026\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\001\002\000\042" +
    "\010\uffc4\012\uffc4\013\uffc4\015\uffc4\022\uffc4\024\uffc4\026" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\102\037\104\042\103\001\002\000\034\010\uffca\012" +
    "\uffca\013\uffca\015\uffca\022\uffca\024\uffca\026\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\001\002\000" +
    "\016\016\067\017\065\025\062\044\064\045\075\047\077" +
    "\001\002\000\016\016\067\017\065\025\062\044\064\045" +
    "\075\047\077\001\002\000\016\016\067\017\065\025\062" +
    "\044\064\045\075\047\077\001\002\000\042\010\uffc4\012" +
    "\uffc4\013\uffc4\015\uffc4\022\uffc4\024\uffc4\026\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\102\037" +
    "\104\042\103\001\002\000\034\010\uffc6\012\uffc6\013\uffc6" +
    "\015\uffc6\022\uffc6\024\uffc6\026\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\001\002\000\042\010\uffc4" +
    "\012\uffc4\013\uffc4\015\uffc4\022\uffc4\024\uffc4\026\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\102" +
    "\037\104\042\103\001\002\000\034\010\uffc5\012\uffc5\013" +
    "\uffc5\015\uffc5\022\uffc5\024\uffc5\026\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\001\002\000\042\010" +
    "\uffc4\012\uffc4\013\uffc4\015\uffc4\022\uffc4\024\uffc4\026\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\102\037\104\042\103\001\002\000\034\010\uffc7\012\uffc7" +
    "\013\uffc7\015\uffc7\022\uffc7\024\uffc7\026\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\001\002\000\034" +
    "\010\uffc8\012\uffc8\013\uffc8\015\uffc8\022\uffc8\024\uffc8\026" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\001\002\000\022\016\uffcd\017\uffcd\025\uffcd\036\uffcd\037" +
    "\uffcd\044\uffcd\045\uffcd\047\uffcd\001\002\000\022\016\uffce" +
    "\017\uffce\025\uffce\036\uffce\037\uffce\044\uffce\045\uffce\047" +
    "\uffce\001\002\000\020\010\uffd3\012\uffd3\013\uffd3\015\uffd3" +
    "\022\uffd3\024\uffd3\026\uffd3\001\002\000\022\016\067\017" +
    "\065\025\062\036\076\037\063\044\064\045\075\047\077" +
    "\001\002\000\022\016\uffcf\017\uffcf\025\uffcf\036\uffcf\037" +
    "\uffcf\044\uffcf\045\uffcf\047\uffcf\001\002\000\022\016\uffd0" +
    "\017\uffd0\025\uffd0\036\uffd0\037\uffd0\044\uffd0\045\uffd0\047" +
    "\uffd0\001\002\000\022\016\uffcc\017\uffcc\025\uffcc\036\uffcc" +
    "\037\uffcc\044\uffcc\045\uffcc\047\uffcc\001\002\000\022\016" +
    "\uffcb\017\uffcb\025\uffcb\036\uffcb\037\uffcb\044\uffcb\045\uffcb" +
    "\047\uffcb\001\002\000\020\010\uffd2\012\uffd2\013\uffd2\015" +
    "\uffd2\022\uffd2\024\uffd2\026\uffd2\001\002\000\016\016\067" +
    "\017\065\025\062\044\064\045\075\047\077\001\002\000" +
    "\016\016\067\017\065\025\062\044\064\045\075\047\077" +
    "\001\002\000\016\016\067\017\065\025\062\044\064\045" +
    "\075\047\077\001\002\000\042\010\uffc3\012\uffc3\013\uffc3" +
    "\015\uffc3\022\uffc3\024\uffc3\026\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\042\uffc3" +
    "\001\002\000\050\010\uffbf\012\uffbf\013\uffbf\015\uffbf\022" +
    "\uffbf\024\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\127\041\126\042" +
    "\uffbf\043\125\001\002\000\042\010\uffc2\012\uffc2\013\uffc2" +
    "\015\uffc2\022\uffc2\024\uffc2\026\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\042\uffc2" +
    "\001\002\000\050\010\uffbf\012\uffbf\013\uffbf\015\uffbf\022" +
    "\uffbf\024\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\127\041\126\042" +
    "\uffbf\043\125\001\002\000\042\010\uffc0\012\uffc0\013\uffc0" +
    "\015\uffc0\022\uffc0\024\uffc0\026\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\042\uffc0" +
    "\001\002\000\050\010\uffbf\012\uffbf\013\uffbf\015\uffbf\022" +
    "\uffbf\024\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\127\041\126\042" +
    "\uffbf\043\125\001\002\000\042\010\uffc1\012\uffc1\013\uffc1" +
    "\015\uffc1\022\uffc1\024\uffc1\026\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\042\uffc1" +
    "\001\002\000\050\010\uffbb\012\uffbb\013\uffbb\015\uffbb\022" +
    "\uffbb\024\uffbb\026\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\001\002\000\042\010\uffc4\012\uffc4\013\uffc4" +
    "\015\uffc4\022\uffc4\024\uffc4\026\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\102\037\104\042\103" +
    "\001\002\000\034\010\uffc9\012\uffc9\013\uffc9\015\uffc9\022" +
    "\uffc9\024\uffc9\026\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\001\002\000\004\026\144\001\002\000" +
    "\050\010\uffb8\012\uffb8\013\uffb8\015\uffb8\022\uffb8\024\uffb8" +
    "\026\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\001\002\000\050\010\uffbc\012\uffbc\013\uffbc\015\uffbc\022" +
    "\uffbc\024\uffbc\026\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\001\002\000\006\024\150\026\uffb4\001\002" +
    "\000\004\026\147\001\002\000\010\010\uffd9\013\uffd9\022" +
    "\uffd9\001\002\000\022\016\067\017\065\025\062\036\076" +
    "\037\063\044\064\045\075\047\077\001\002\000\004\026" +
    "\uffb6\001\002\000\006\024\150\026\uffb4\001\002\000\004" +
    "\026\uffb5\001\002\000\010\010\uffdc\013\uffdc\022\uffdc\001" +
    "\002\000\004\015\156\001\002\000\014\003\050\007\015" +
    "\011\052\014\054\047\055\001\002\000\010\010\uffd4\013" +
    "\uffd4\022\uffd4\001\002\000\004\012\161\001\002\000\014" +
    "\003\050\007\015\011\052\014\054\047\055\001\002\000" +
    "\010\010\uffd6\013\164\022\uffd6\001\002\000\010\010\uffd7" +
    "\013\uffd7\022\uffd7\001\002\000\014\003\050\007\015\011" +
    "\052\014\054\047\055\001\002\000\010\010\uffd5\013\uffd5" +
    "\022\uffd5\001\002\000\004\010\172\001\002\000\014\003" +
    "\050\007\015\011\052\014\054\047\055\001\002\000\006" +
    "\010\uffe4\022\167\001\002\000\004\010\uffe5\001\002\000" +
    "\012\010\uffe6\013\uffe6\022\uffe6\050\uffe6\001\002\000\004" +
    "\002\001\001\002\000\006\022\175\025\176\001\002\000" +
    "\012\003\014\007\015\020\023\021\012\001\002\000\006" +
    "\005\207\047\034\001\002\000\004\022\201\001\002\000" +
    "\004\022\ufff0\001\002\000\012\003\014\007\015\020\023" +
    "\021\012\001\002\000\004\022\uffef\001\002\000\004\022" +
    "\uffec\001\002\000\004\007\015\001\002\000\004\022\uffed" +
    "\001\002\000\006\022\216\026\uffe7\001\002\000\004\047" +
    "\034\001\002\000\004\023\211\001\002\000\010\003\014" +
    "\020\023\021\012\001\002\000\006\022\uffe9\026\uffe9\001" +
    "\002\000\004\023\214\001\002\000\010\003\014\020\023" +
    "\021\012\001\002\000\006\022\uffea\026\uffea\001\002\000" +
    "\006\005\207\047\034\001\002\000\004\026\220\001\002" +
    "\000\004\022\uffeb\001\002\000\006\022\216\026\uffe7\001" +
    "\002\000\004\026\uffe8\001\002\000\004\022\uffee\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\010\005\017" +
    "\007\015\012\021\014\020\021\012\045\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\021\045\023\044\024" +
    "\052\025\043\027\046\031\050\001\001\000\002\001\001" +
    "\000\004\010\034\001\001\000\012\004\027\012\030\014" +
    "\020\021\031\001\001\000\002\001\001\000\004\021\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\025\013\026\014\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\037\001" +
    "\001\000\002\001\001\000\012\005\042\006\041\007\015" +
    "\045\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\032\157\035\067\037\071\041\065\042\073\001\001" +
    "\000\002\001\001\000\014\032\154\035\067\037\071\041" +
    "\065\042\073\001\001\000\004\026\057\001\001\000\014" +
    "\032\153\035\067\037\071\041\065\042\073\001\001\000" +
    "\016\032\144\035\067\037\071\041\065\042\073\043\145" +
    "\001\001\000\002\001\001\000\014\032\070\035\067\037" +
    "\071\041\065\042\073\001\001\000\014\032\141\035\067" +
    "\037\071\041\065\042\073\001\001\000\010\037\137\041" +
    "\065\042\073\001\001\000\006\041\136\042\073\001\001" +
    "\000\002\001\001\000\004\040\127\001\001\000\002\001" +
    "\001\000\006\033\115\034\116\001\001\000\002\001\001" +
    "\000\004\036\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\037\077\041\065\042\073" +
    "\001\001\000\002\001\001\000\004\036\100\001\001\000" +
    "\002\001\001\000\010\037\110\041\065\042\073\001\001" +
    "\000\010\037\106\041\065\042\073\001\001\000\010\037" +
    "\104\041\065\042\073\001\001\000\004\036\105\001\001" +
    "\000\002\001\001\000\004\036\107\001\001\000\002\001" +
    "\001\000\004\036\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\035\123\037\071\041\065\042\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\134\042\073" +
    "\001\001\000\006\041\132\042\073\001\001\000\006\041" +
    "\130\042\073\001\001\000\002\001\001\000\004\040\131" +
    "\001\001\000\002\001\001\000\004\040\133\001\001\000" +
    "\002\001\001\000\004\040\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\032\151\035\067\037\071\041\065\042\073" +
    "\001\001\000\002\001\001\000\004\044\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\021\045\023\156\024\052\025\043\027\046\031\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\021\045" +
    "\023\161\024\052\025\043\027\046\031\050\001\001\000" +
    "\004\030\162\001\001\000\002\001\001\000\016\021\045" +
    "\023\164\024\052\025\043\027\046\031\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\045\023\167" +
    "\024\052\025\043\027\046\031\050\001\001\000\004\022" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\177\016\176\001\001\000\014\005" +
    "\203\007\015\021\202\045\016\046\222\001\001\000\006" +
    "\010\207\017\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\203\007\015\021\202\045\016\046\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\204\001\001\000\002\001\001\000\004\020\216\001\001" +
    "\000\004\010\212\001\001\000\002\001\001\000\004\045" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\214\001\001\000\002\001\001\000\006\010\207\017" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private ArrayList<String> erros;

    public parser(Scanner s, ArrayList<String> erros){
        super(s);
        this.erros = erros;
    }

    public int error_sync_size(){
        return 1;
    }

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipo ::= error 
            {
              Object RESULT =null;
		System.err.println("Expected int ou boolean");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo ::= RSRVDA_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo ::= RSRVDA_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lsta_expressao2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lsta_expressao2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lsta_expressao2 ::= VIRGULA expressao lsta_expressao2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lsta_expressao2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lsta_expressao ::= expressao lsta_expressao2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lsta_expressao",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variavel ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variavel",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // fator ::= ABRE_P error 
            {
              Object RESULT =null;
		System.out.println("Faltou fechar parentesis");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // fator ::= RSRVDA_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fator ::= RSRVDA_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // fator ::= OP_NOT fator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // fator ::= ABRE_P expressao FECHA_P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // fator ::= NUM_INTEIRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fator ::= variavel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fator",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_termo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_termo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_termo ::= OP_MULT fator lista_termo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_termo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lista_termo ::= OP_AND fator lista_termo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_termo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista_termo ::= OP_DIV fator lista_termo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_termo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // termo ::= fator lista_termo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_exp_simples ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_exp_simples",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_exp_simples ::= OP_OR termo lista_exp_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_exp_simples",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_exp_simples ::= OP_SUB termo lista_exp_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_exp_simples",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_exp_simples ::= OP_SOMA termo lista_exp_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_exp_simples",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp_simples ::= termo lista_exp_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simples",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp_simples ::= OP_SUB termo lista_exp_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simples",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp_simples ::= OP_SOMA termo lista_exp_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_simples",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relacao ::= OP_MAIOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacao",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relacao ::= OP_MAIOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacao",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // relacao ::= OP_MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacao",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // relacao ::= OP_MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacao",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // relacao ::= OP_DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacao",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relacao ::= OP_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacao",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressao2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressao2 ::= relacao exp_simples 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressao ::= exp_simples expressao2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cmd_repetitivo ::= RSRVDA_WHILE expressao RSRVDA_DO cmd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd_repetitivo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cmd_condicional2 ::= RSRVDA_ELSE cmd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd_condicional2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cmd_condicional2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd_condicional2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cmd_condicional ::= RSRVDA_IF expressao RSRVDA_THEN cmd cmd_condicional2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd_condicional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // chamada_sub2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamada_sub2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // chamada_sub2 ::= ABRE_P lsta_expressao FECHA_P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamada_sub2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // chamada_sub ::= IDENTIFICADOR chamada_sub2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamada_sub",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // atribuicao ::= IDENTIFICADOR ATRIBUIÇÃO error 
            {
              Object RESULT =null;
		System.err.println("Expressão ilegal na atribuição");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // atribuicao ::= IDENTIFICADOR error expressao 
            {
              Object RESULT =null;
		System.err.println("Operador de atribuição incorreto");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // atribuicao ::= error 
            {
              Object RESULT =null;
		System.err.println("Erro na construção da atribuição");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // atribuicao ::= IDENTIFICADOR ATRIBUIÇÃO expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cmd ::= cmd_repetitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cmd ::= cmd_condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cmd ::= cmd_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cmd ::= chamada_sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cmd ::= atribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lsta_cmd ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lsta_cmd",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lsta_cmd ::= PTO_VIRGULA cmd lsta_cmd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lsta_cmd",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cmd_composto ::= RSRVDA_BEGIN cmd lsta_cmd RSRVDA_END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd_composto",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lsta_prmtrs_formal ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lsta_prmtrs_formal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lsta_prmtrs_formal ::= PTO_VIRGULA sec_prmtrs_formal lsta_prmtrs_formal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lsta_prmtrs_formal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sec_prmtrs_formal ::= lsta_id DOIS_PONTOS tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sec_prmtrs_formal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sec_prmtrs_formal ::= RSRVDA_VAR lsta_id DOIS_PONTOS tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sec_prmtrs_formal",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // prmtrs_formal ::= ABRE_P sec_prmtrs_formal lsta_prmtrs_formal FECHA_P 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prmtrs_formal",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dec_sub3 ::= cmd_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_sub3",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dec_sub3 ::= pt_dec_var cmd_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_sub3",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dec_sub2 ::= PTO_VIRGULA dec_sub3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_sub2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dec_sub2 ::= prmtrs_formal PTO_VIRGULA dec_sub3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_sub2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dec_sub ::= RSRVDA_PROCEDURE IDENTIFICADOR dec_sub2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_sub",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // pt2_dec_sub ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pt2_dec_sub",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pt2_dec_sub ::= pt_dec_sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pt2_dec_sub",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pt_dec_sub ::= dec_sub PTO_VIRGULA pt2_dec_sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pt_dec_sub",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lsta_id2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lsta_id2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lsta_id2 ::= VIRGULA lsta_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lsta_id2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lsta_id ::= IDENTIFICADOR lsta_id2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lsta_id",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_var ::= tipo lsta_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_var",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pt_dec_var2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pt_dec_var2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pt_dec_var2 ::= pt_dec_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pt_dec_var2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pt_dec_var ::= dec_var PTO_VIRGULA pt_dec_var2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pt_dec_var",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // apos_pt_dec_var ::= cmd_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("apos_pt_dec_var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // apos_pt_dec_var ::= pt_dec_sub cmd_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("apos_pt_dec_var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloco ::= cmd_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloco ::= pt_dec_sub cmd_composto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloco ::= pt_dec_var apos_pt_dec_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= RSRVDA_PROGRAM IDENTIFICADOR PTO_VIRGULA bloco PONTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

