package jflex;
import java_cup.runtime.*;
%%

%{

private Token criarToken(String lexema, int tipo) {
   return new Token(lexema,tipo,yyline,yycolumn);
}

%}

%public
%class AnalisadorLexicoLALG
%type Token
%line
%column

DELIMITADOR = [\n| |\t]

//Palavras Reservadas

RSRVDA_PROGRAM = "program"              //tipo = 0
RSRVDA_VAR = "var"                      //tipo = 1
RSRVDA_PROCEDURE = "procedure"          //tipo = 2 
RSRVDA_BEGIN = "begin"                  //tipo = 3
RSRVDA_END = "end"                      //tipo = 4
RSRVDA_IF = "if"                        //tipo = 5
RSRVDA_THEN = "then"                    //tipo = 6
RSRVDA_ELSE = "else"                    //tipo = 7
RSRVDA_WHILE = "while"                  //tipo = 8
RSRVDA_DO = "do"                        //tipo = 9
RSRVDA_READ = "read"                    //tipo = 10
RSRVDA_WRITE = "write"                  //tipo = 11
RSRVDA_TRUE = "true"                    //tipo = 12
RSRVDA_FALSE = "false"                  //tipo = 13
RSRVDA_INTEGER = "int"                  //tipo = 14
RSRVDA_BOOLEAN = "boolean"              //tipo = 16

//================================

PTO_VIRGULA = ";"                       //tipo = 17
DOIS_PONTOS = ":"                       //tipo = 18
VIRGULA = ","                           //tipo = 19
ABRE_P = "("                            //tipo = 20
FECHA_P = ")"                           //tipo = 21
ATRIBUIÇÃO = ":="                       //tipo = 22
OP_MENOR = "<"                          //tipo = 23
OP_MAIOR = ">"                          //tipo = 24
OP_MENOR_IGUAL = "<="                   //tipo = 25
OP_MAIOR_IGUAL = ">="                   //tipo = 26
OP_DIFERENTE = "<>"                     //tipo = 27
OP_SOMA = "+"                           //tipo = 28
OP_SUB = "-"                            //tipo = 29
OP_DIV = "div"                          //tipo = 30
OP_MULT = "*"                           //tipo = 31
OP_OR  = "or"                           //tipo = 32
OP_AND = "and"                          //tipo = 33
OP_NOT = "not"                          //tipo = 34
NUM_INTEIRO = [0-9]+                    //tipo = 35
NUM_REAL = [0-9]+\.[0-9]+               //tipo = 36
IDENTIFICADOR = [_|a-z|A-Z][_|a-z|A-Z|0-9]*  //tipo = 37
PONTO = "."                             //tipo=38    

NUM_REAL_MALFORMADO = [0-9][0-9]*\.|\.[0-9][0-9]* //tipo=-2

%state COMENTARIO_UNICO
%state COMENTARIO_BLOCO

%%

<COMENTARIO_UNICO>{
    \n  {yybegin(YYINITIAL);}
    .   {/****/}
}

<COMENTARIO_BLOCO> <<EOF>> {yybegin(YYINITIAL);return criarToken(yytext(),-3);}
<COMENTARIO_BLOCO> "}" {yybegin(YYINITIAL);}   
<COMENTARIO_BLOCO> [^]  {/****/}



<YYINITIAL>{
    "//"    {yybegin(COMENTARIO_UNICO);}
    "{"     {yybegin(COMENTARIO_BLOCO);}
    "}"     {return criarToken(yytext(),-4);}
    {DELIMITADOR}   {/****/}
    
    {RSRVDA_PROGRAM}    {return criarToken(yytext(),0);}
    {RSRVDA_VAR}    {return criarToken(yytext(),1);}
    {RSRVDA_PROCEDURE}    {return criarToken(yytext(),2);}
    {RSRVDA_BEGIN}    {return criarToken(yytext(),3);}
    {RSRVDA_END}    {return criarToken(yytext(),4);}
    {RSRVDA_IF}    {return criarToken(yytext(),5);}
    {RSRVDA_THEN}    {return criarToken(yytext(),6);}
    {RSRVDA_ELSE}    {return criarToken(yytext(),7);}
    {RSRVDA_WHILE}    {return criarToken(yytext(),8);}
    {RSRVDA_DO}    {return criarToken(yytext(),9);}
    {RSRVDA_READ}    {return criarToken(yytext(),10);}
    {RSRVDA_WRITE}    {return criarToken(yytext(),11);}
    {RSRVDA_TRUE}    {return criarToken(yytext(),12);}
    {RSRVDA_FALSE}    {return criarToken(yytext(),13);}
    {RSRVDA_INTEGER}    {return criarToken(yytext(),14);}
    {RSRVDA_BOOLEAN}    {return criarToken(yytext(),16);}

    {PTO_VIRGULA}    {return criarToken(yytext(),17);}
    {DOIS_PONTOS}    {return criarToken(yytext(),18);}
    {VIRGULA}    {return criarToken(yytext(),19);}
    {ABRE_P}    {return criarToken(yytext(),20);}
    {FECHA_P}    {return criarToken(yytext(),21);}
    {ATRIBUIÇÃO}    {return criarToken(yytext(),22);}
    {OP_MENOR}    {return criarToken(yytext(),23);}
    {OP_MAIOR}    {return criarToken(yytext(),24);}
    {OP_MENOR_IGUAL}    {return criarToken(yytext(),25);}
    {OP_MAIOR_IGUAL}    {return criarToken(yytext(),26);}
    {OP_DIFERENTE}    {return criarToken(yytext(),27);}
    {OP_SOMA}    {return criarToken(yytext(),28);}
    {OP_SUB}    {return criarToken(yytext(),29);}
    {OP_DIV}    {return criarToken(yytext(),30);}
    {OP_MULT}    {return criarToken(yytext(),31);}
    {OP_OR}    {return criarToken(yytext(),32);}
    {OP_AND}    {return criarToken(yytext(),33);}
    {OP_NOT}    {return criarToken(yytext(),34);}
    {NUM_INTEIRO}    {return criarToken(yytext(),35);}
    {NUM_REAL}    {return criarToken(yytext(),36);}
    {IDENTIFICADOR} {return criarToken(yytext(),37);}
    {PONTO} {return criarToken(yytext(),38);}
    {NUM_REAL_MALFORMADO}   {return criarToken(yytext(),-2);}
    .   {return criarToken(yytext(),-1);}
}