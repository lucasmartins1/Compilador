package jflex;
import java_cup.runtime.*;
import cup.sym;
%%

%{

    boolean tokensComentarios = false;
    public int symbol;
    private Symbol symbol(int type){
        symbol = type;
        return new Symbol(type,yyline,yycolumn);
    }

    private Symbol symbol(int type, Object value){
        symbol = type;
        return new Symbol(type,yyline,yycolumn, value);
    }

    public Token yylex() {
        return new Token(yytext(),symbol,yyline,yycolumn,yychar);
    }

    public void tokensComentarios(boolean tokensComentarios){
        this.tokensComentarios = tokensComentarios;
    }
%}

%public
%class AnalisadorLexicoLALG
//%type Token
%line
%column
%char
%cup
DELIMITADOR = [\n| |\t|\r|\r\n]

//Palavras Reservadas

RSRVDA_PROGRAM = "program"              //tipo = 0
RSRVDA_VAR = "var"                      //tipo = 1
RSRVDA_PROCEDURE = "procedure"          //tipo = 2 
RSRVDA_BEGIN = "begin"                  //tipo = 3
RSRVDA_END = "end"                      //tipo = 4
RSRVDA_IF = "if"                        //tipo = 5
RSRVDA_THEN = "then"                    //tipo = 6
RSRVDA_ELSE = "else"                    //tipo = 7
RSRVDA_WHILE = "while"                  //tipo = 8
RSRVDA_DO = "do"                        //tipo = 9
//RSRVDA_READ = "read"                    //tipo = 10
//RSRVDA_WRITE = "write"                  //tipo = 11
RSRVDA_TRUE = "true"                    //tipo = 12
RSRVDA_FALSE = "false"                  //tipo = 13
RSRVDA_INTEGER = "int"                  //tipo = 14
RSRVDA_BOOLEAN = "boolean"              //tipo = 16

//================================

PTO_VIRGULA = ";"                       //tipo = 17
DOIS_PONTOS = ":"                       //tipo = 18
VIRGULA = ","                           //tipo = 19
ABRE_P = "("                            //tipo = 20
FECHA_P = ")"                           //tipo = 21
ATRIBUIÇÃO = ":="                       //tipo = 22
OP_MENOR = "<"                          //tipo = 23
OP_MAIOR = ">"                          //tipo = 24
OP_MENOR_IGUAL = "<="                   //tipo = 25
OP_MAIOR_IGUAL = ">="                   //tipo = 26
OP_DIFERENTE = "<>"                     //tipo = 27
OP_IGUAL = "="
OP_SOMA = "+"                           //tipo = 28
OP_SUB = "-"                            //tipo = 29
OP_DIV = "div"                          //tipo = 30
OP_MULT = "*"                           //tipo = 31
OP_OR  = "or"                           //tipo = 32
OP_AND = "and"                          //tipo = 33
OP_NOT = "not"                          //tipo = 34
NUM_INTEIRO = [0-9]+                    //tipo = 35
NUM_REAL = [0-9]+\.[0-9]+               //tipo = 36
IDENTIFICADOR = [_|a-z|A-Z][_|a-z|A-Z|0-9]*  //tipo = 37
PONTO = "."                             //tipo=38    

COMENTARIO_LINHA = "//"[^\n]*\n?        //tipo -4
COMENTARIO_BLOCO = "{"[^}]*"}"         //tipo -4
COMENTARIO_BLOCO_SEM_FECHAR = "{"[^}]* //tipo -5
COMENTARIO_BLOCO_SEM_ABRIR = "}"        //tipo -6

NUM_REAL_MALFORMADO = [0-9][0-9]*\.|\.[0-9][0-9]* //tipo=-2


%%
<<EOF>> {return symbol(sym.EOF,"");}
<YYINITIAL>{
    
    {COMENTARIO_LINHA} {if(tokensComentarios)return symbol(sym.COMENTARIO_LINHA,yytext());}
    {COMENTARIO_BLOCO} {if(tokensComentarios)return symbol(sym.COMENTARIO_LINHA,yytext());}
    {COMENTARIO_BLOCO_SEM_FECHAR}   {return symbol(sym.COMENTARIO_BLOCO_SEM_FECHAR,"{");}
    {COMENTARIO_BLOCO_SEM_ABRIR}    {return symbol(sym.COMENTARIO_BLOCO_SEM_ABRIR,"}");}

    {DELIMITADOR}   {/****/}
    
    {RSRVDA_PROGRAM}    {return symbol(sym.RSRVDA_PROGRAM,yytext());}
    {RSRVDA_VAR}    {return symbol(sym.RSRVDA_VAR,yytext());}
    {RSRVDA_PROCEDURE}    {return symbol(sym.RSRVDA_PROCEDURE,yytext());}
    {RSRVDA_BEGIN}    {return symbol(sym.RSRVDA_BEGIN,yytext());}
    {RSRVDA_END}    {return symbol(sym.RSRVDA_END,yytext());}
    {RSRVDA_IF}    {return symbol(sym.RSRVDA_IF,yytext());}
    {RSRVDA_THEN}    {return symbol(sym.RSRVDA_THEN,yytext());}
    {RSRVDA_ELSE}    {return symbol(sym.RSRVDA_ELSE,yytext());}
    {RSRVDA_WHILE}    {return symbol(sym.RSRVDA_WHILE,yytext());}
    {RSRVDA_DO}    {return symbol(sym.RSRVDA_DO,yytext());}
    //{RSRVDA_READ}    {return symbol(sym.RSRVDA_READ,yytext());}
    //{RSRVDA_WRITE}    {return symbol(sym.RSRVDA_WRITE,yytext());}
    {RSRVDA_TRUE}    {return symbol(sym.RSRVDA_TRUE,yytext());}
    {RSRVDA_FALSE}    {return symbol(sym.RSRVDA_FALSE,yytext());}
    {RSRVDA_INTEGER}    {return symbol(sym.RSRVDA_INTEGER,yytext());}
    {RSRVDA_BOOLEAN}    {return symbol(sym.RSRVDA_BOOLEAN,yytext());}

    {PTO_VIRGULA}    {return symbol(sym.PTO_VIRGULA,yytext());}
    {DOIS_PONTOS}    {return symbol(sym.DOIS_PONTOS,yytext());}
    {VIRGULA}    {return symbol(sym.VIRGULA,yytext());}
    {ABRE_P}    {return symbol(sym.ABRE_P,yytext());}
    {FECHA_P}    {return symbol(sym.FECHA_P,yytext());}
    {ATRIBUIÇÃO}    {return symbol(sym.ATRIBUIÇÃO,yytext());}
    {OP_MENOR}    {return symbol(sym.OP_MENOR,yytext());}
    {OP_MAIOR}    {return symbol(sym.OP_MAIOR,yytext());}
    {OP_MENOR_IGUAL}    {return symbol(sym.OP_MENOR_IGUAL,yytext());}
    {OP_MAIOR_IGUAL}    {return symbol(sym.OP_MAIOR_IGUAL,yytext());}
    {OP_DIFERENTE}    {return symbol(sym.OP_DIFERENTE,yytext());}
    {OP_IGUAL}      {return symbol(sym.OP_IGUAL,yytext());}
    {OP_SOMA}    {return symbol(sym.OP_SOMA,yytext());}
    {OP_SUB}    {return symbol(sym.OP_SUB,yytext());}
    {OP_DIV}    {return symbol(sym.OP_DIV,yytext());}
    {OP_MULT}    {return symbol(sym.OP_MULT,yytext());}
    {OP_OR}    {return symbol(sym.OP_OR,yytext());}
    {OP_AND}    {return symbol(sym.OP_AND,yytext());}
    {OP_NOT}    {return symbol(sym.OP_NOT,yytext());}
    {NUM_INTEIRO}    {return symbol(sym.NUM_INTEIRO,yytext());}
    {NUM_REAL}    {return symbol(sym.NUM_REAL,yytext());}
    {IDENTIFICADOR} {return symbol(sym.IDENTIFICADOR,yytext());}
    {PONTO} {return symbol(sym.PONTO,yytext());}
    {NUM_REAL_MALFORMADO}   {return symbol(sym.NUM_REAL_MALFORMADO,yytext());}
    .   {return symbol(sym.CHAR_INVALIDO,yytext());}
}
. {return symbol(sym.CHAR_INVALIDO,yytext());}